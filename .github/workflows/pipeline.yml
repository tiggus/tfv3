name: pipeline
description: call workflows for labels and semver

on:
  pull_request:
    types: [labeled, unlabeled]
  workflow_dispatch:

concurrency:
  group: ${{ github.workflow }}-${{ github.ref }}
  cancel-in-progress: true

jobs:
  labels:
    uses: ./.github/workflows/labels.yml
    secrets: inherit
      #token: ${{ secrets.GITHUB_TOKEN }}

  echo:
    runs-on: ubuntu-latest
    needs: labels
    steps:
      - run: |
          echo ${{ needs.labels.outputs.label }}
          # version=$(echo "${{ env.PR_LABEL_LIST}}"
          # echo "SEMVER=$version" >> $GITHUB_ENV


  semver:
    name: semver
    needs: labels
    runs-on: ubuntu-latest
    permissions:
      contents: read
      pull-requests: write
    
    steps:
      - name: checkout branch
        uses: actions/checkout@v4
        with:
          fetch-depth: 0  

      - name: semantic versioning
        if: ${{ needs.labels.outputs.label != '' }}
        id: semver
        uses: ./.github/actions/semver
        with:
          version-bump: ${{ needs.labels.outputs.label }}
          token: ${{ secrets.GITHUB_TOKEN }}
    
  terraform:
    uses: ./.github/workflows/terraform.yml

    



  # reusable_workflow_job:
  #   runs-on: ubuntu-latest
  #   steps:
  #   - uses: actions/labeler@v4
  #     with:
  #       repo-token: ${{ secrets.personal_access_token }}
  #       configuration-path: ${{ inputs.config-path }}

  # docker:
  #   name: docker
  #   needs: [ semver, labels ]
  #   if: ${{ needs.labels.outputs.label != '' }}
  #   runs-on: ubuntu-latest
  #   permissions:
  #     contents: read
  #     pull-requests: write
  #   steps:
  #     - name: build image
  #       id: build
  #       run: echo build
  #     - name: deploy to ecr
  #       run: echo deploy
  
  # wiz:
  #   name: wiz
  #   needs: docker
  #   runs-on: ubuntu-latest
  #   permissions:
  #     contents: read
  #     pull-requests: write
  #   steps:
  #     - name: scan image
  #       id: scan
  #       run: echo build
  #     - name: sign image
  #       run: echo sign

  # deploy:
  #   name: deploy
  #   needs: wiz
  #   runs-on: ubuntu-latest
  #   environment: prd
  #   permissions:
  #     contents: read
  #     pull-requests: write
  #   steps:
  #     - name: deploy
  #       run: echo deploy
 


     
        # run: |
        #   version=$(echo "${{ env.PR_LABEL_LIST}}" | sed -e 's/\[//g' -e 's/\]//g' | xargs)
        #   if [[ -z "$version" ]]; then
        #     echo "no labels found"

        #   elif [[ "$version" == *","* ]]; then
        #     echo "too many labels found"

        #   else
        #     echo "SEMVER=$version" >> $GITHUB_ENV
        #   fi
        # env: 
        #   PR_LABEL_LIST: ${{ toJson(github.event.pull_request.labels.*.name) }}

      # - name: show semver
      #   if : ${{ env.SEMVER != '' }}
      #   run: |
      #     echo "${{ env.SEMVER }}"

      


      # - name: show new version
      #   run: echo "${{ steps.semver.outputs.new-version }}"
      # - name: show current version
      #   run: echo "${{ steps.semver.outputs.current-version }}"


      # - name: Create and push Git tag
      #   if: steps.version_check.outputs.should_release == 'true'
      #   run: |
      #     tag="v${{ steps.semver.outputs.new-version }}"
      #     # git config user.name "github-actions[bot]"
      #     # git config user.email "github-actions[bot]@users.noreply.github.com"
      #     # git tag "$tag"
      #     # git push origin "$tag"

      # # - name: Create GitHub Release
      # #   if: steps.version_check.outputs.should_release == 'true'
      # #   uses: softprops/action-gh-release@v1
      # #   with:
      # #     tag_name: v${{ steps.semver.outputs.new-version }}
      # #     name: Release v${{ steps.semver.outputs.new-version }}
      # #     generate_release_notes: true

      
      # - name: comment pr
      #   uses: actions/github-script@v7
      #   with:
      #     github-token: ${{secrets.GITHUB_TOKEN}}
      #     script: |
      #       github.rest.issues.createComment({
      #         issue_number: context.issue.number,
      #         owner: context.repo.owner,
      #         repo: context.repo.repo,
      #         body: 'ğŸš• "${{ steps.semver.outputs.current-version }}" -> "${{ steps.semver.outputs.new-version }}"'
      #       })
            