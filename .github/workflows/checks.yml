name: CI
env:
  VAR: ${{ vars.VAR }}

on:
  push:
    branches:
      - main
  pull_request:
    types: [opened, synchronize, reopened]
jobs:
  setup:
    name: Setup and Cache Dependencies
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Set up Node.js
        uses: actions/setup-node@v4
        with:
          node-version: 18
          cache: "npm"

      - name: Cache dependencies
        id: cache-deps
        uses: actions/cache@v4
        with:
          path: node_modules
          key: ${{ runner.os }}-node-${{ hashFiles('package-lock.json') }}
          restore-keys: |
            ${{ runner.os }}-node-

      - name: Install dependencies
        if: steps.cache-deps.outputs.cache-hit != 'true'
        run: npm ci

      - name: Upload node_modules cache
        if: steps.cache-deps.outputs.cache-hit != 'true'
        uses: actions/upload-artifact@v4
        with:
          name: node_modules
          path: node_modules

  lint:
    name: Lint
    runs-on: ubuntu-latest
    needs: setup
    steps:
      - uses: actions/checkout@v4

      - name: Restore node_modules from cache
        uses: actions/cache@v4
        with:
          path: node_modules
          key: ${{ runner.os }}-node-${{ hashFiles('package-lock.json') }}
          restore-keys: |
            ${{ runner.os }}-node-

      - name: Run ESLint and generate report
        run: npm run lint:report

      - name: Upload ESLint report
        uses: actions/upload-artifact@v4
        with:
          name: eslint-report
          path: reports/eslint-report.json
          retention-days: 1

  unit_tests:
    name: Unit Tests
    runs-on: ubuntu-latest
    needs: setup
    steps:
      - uses: actions/checkout@v4

      - name: Restore node_modules from cache
        uses: actions/cache@v4
        with:
          path: node_modules
          key: ${{ runner.os }}-node-${{ hashFiles('package-lock.json') }}
          restore-keys: |
            ${{ runner.os }}-node-

      - name: Run tests with coverage
        run: npm run test:coverage

      - name: Upload test coverage report
        uses: actions/upload-artifact@v4
        with:
          name: coverage-report
          path: coverage/
          retention-days: 1

  chromatic:
    name: Chromatic
    runs-on: ubuntu-latest
    needs: [setup, lint, unit_tests]
    steps:
      - uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Restore node_modules from cache
        uses: actions/cache@v4
        with:
          path: node_modules
          key: ${{ runner.os }}-node-${{ hashFiles('package-lock.json') }}
          restore-keys: |
            ${{ runner.os }}-node-

      - name: Run Chromatic
        uses: chromaui/action@latest
        with:
          projectToken: ${{ secrets.CHROMATIC_PROJECT_TOKEN }}

  sonarqube:
    name: SonarQube
    runs-on: ubuntu-latest
    needs: [setup, lint, unit_tests]
    steps:
      - uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Download ESLint report
        uses: actions/download-artifact@v4
        with:
          name: eslint-report
          path: reports/

      - name: Download test execution report
        uses: actions/download-artifact@v4
        with:
          name: coverage-report
          path: coverage/

      - name: SonarQube Scan
        uses: SonarSource/sonarqube-scan-action@v5
        env:
          SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}

  wiz_cli_scan:
    name: Wiz CLI
    runs-on: ubuntu-latest
    needs: [setup, lint, unit_tests]
    env:
      SCAN_PATH: "."

    defaults:
      run:
        shell: bash

    steps:
      - uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Download Wiz CLI
        run: curl -o wizcli https://downloads.wiz.io/wizcli/latest/wizcli-linux-amd64 && chmod +x wizcli

      - name: Authenticate with Wiz CLI
        run: ./wizcli auth --id "$WIZ_CLIENT_ID" --secret "$WIZ_CLIENT_SECRET"
        env:
          WIZ_CLIENT_ID: ${{ secrets.WIZ_CLIENT_ID }}
          WIZ_CLIENT_SECRET: ${{ secrets.WIZ_CLIENT_SECRET }}

      - name: Run Wiz CLI directory scan
        run: ./wizcli dir scan --path $SCAN_PATH

  build:
    name: Build Application
    runs-on: ubuntu-latest
    needs: [setup, lint, unit_tests]
    steps:
      - uses: actions/checkout@v4

      - name: Restore node_modules from cache
        uses: actions/cache@v4
        with:
          path: node_modules
          key: ${{ runner.os }}-node-${{ hashFiles('package-lock.json') }}
          restore-keys: |
            ${{ runner.os }}-node-

      - name: Build Next.js App
        run: npm run build
