
     
        # run: |
        #   version=$(echo "${{ env.PR_LABEL_LIST}}" | sed -e 's/\[//g' -e 's/\]//g' | xargs)
        #   if [[ -z "$version" ]]; then
        #     echo "no labels found"

        #   elif [[ "$version" == *","* ]]; then
        #     echo "too many labels found"

        #   else
        #     echo "SEMVER=$version" >> $GITHUB_ENV
        #   fi
        # env: 
        #   PR_LABEL_LIST: ${{ toJson(github.event.pull_request.labels.*.name) }}

      # - name: show semver
      #   if : ${{ env.SEMVER != '' }}
      #   run: |
      #     echo "${{ env.SEMVER }}"

      


      # - name: show new version
      #   run: echo "${{ steps.semver.outputs.new-version }}"
      # - name: show current version
      #   run: echo "${{ steps.semver.outputs.current-version }}"


      # - name: Create and push Git tag
      #   if: steps.version_check.outputs.should_release == 'true'
      #   run: |
      #     tag="v${{ steps.semver.outputs.new-version }}"
      #     # git config user.name "github-actions[bot]"
      #     # git config user.email "github-actions[bot]@users.noreply.github.com"
      #     # git tag "$tag"
      #     # git push origin "$tag"

      # # - name: Create GitHub Release
      # #   if: steps.version_check.outputs.should_release == 'true'
      # #   uses: softprops/action-gh-release@v1
      # #   with:
      # #     tag_name: v${{ steps.semver.outputs.new-version }}
      # #     name: Release v${{ steps.semver.outputs.new-version }}
      # #     generate_release_notes: true

      
      # - name: comment pr
      #   uses: actions/github-script@v7
      #   with:
      #     github-token: ${{secrets.GITHUB_TOKEN}}
      #     script: |
      #       github.rest.issues.createComment({
      #         issue_number: context.issue.number,
      #         owner: context.repo.owner,
      #         repo: context.repo.repo,
      #         body: 'ğŸš• "${{ steps.semver.outputs.current-version }}" -> "${{ steps.semver.outputs.new-version }}"'
      #       })
            